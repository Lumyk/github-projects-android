
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql' 'Sources' '../java' ///

/// interface com.lumyk.swiftbindings.ProjectsBinding$Listener ///

public protocol ProjectsBinding_Listener: JavaProtocol {

    /// public abstract void com.lumyk.swiftbindings.ProjectsBinding$Listener.createOauthURL()

    func createOauthURL()

    /// public abstract void com.lumyk.swiftbindings.ProjectsBinding$Listener.getUser()

    func getUser()

    /// public abstract void com.lumyk.swiftbindings.ProjectsBinding$Listener.handleAccessTokenURL(java.lang.String)

    func handleAccessTokenURL( url: String? )

    /// public abstract void com.lumyk.swiftbindings.ProjectsBinding$Listener.setCacheDir(java.lang.String)

    func setCacheDir( cacheDir: String? )

    /// public abstract void com.lumyk.swiftbindings.ProjectsBinding$Listener.setupAccessToken(java.lang.String)

    func setupAccessToken( accessToken: String? )

}


open class ProjectsBinding_ListenerForward: JNIObjectForward, ProjectsBinding_Listener {

    private static var ProjectsBinding_ListenerJNIClass: jclass?

    /// public abstract void com.lumyk.swiftbindings.ProjectsBinding$Listener.createOauthURL()

    private static var createOauthURL_MethodID_6: jmethodID?

    open func createOauthURL() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "createOauthURL", methodSig: "()V", methodCache: &ProjectsBinding_ListenerForward.createOauthURL_MethodID_6, args: &__args, locals: &__locals )
    }


    /// public abstract void com.lumyk.swiftbindings.ProjectsBinding$Listener.getUser()

    private static var getUser_MethodID_7: jmethodID?

    open func getUser() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "getUser", methodSig: "()V", methodCache: &ProjectsBinding_ListenerForward.getUser_MethodID_7, args: &__args, locals: &__locals )
    }


    /// public abstract void com.lumyk.swiftbindings.ProjectsBinding$Listener.handleAccessTokenURL(java.lang.String)

    private static var handleAccessTokenURL_MethodID_8: jmethodID?

    open func handleAccessTokenURL( url: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: url, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "handleAccessTokenURL", methodSig: "(Ljava/lang/String;)V", methodCache: &ProjectsBinding_ListenerForward.handleAccessTokenURL_MethodID_8, args: &__args, locals: &__locals )
    }

    open func handleAccessTokenURL( _ _url: String? ) {
        handleAccessTokenURL( url: _url )
    }

    /// public abstract void com.lumyk.swiftbindings.ProjectsBinding$Listener.setCacheDir(java.lang.String)

    private static var setCacheDir_MethodID_9: jmethodID?

    open func setCacheDir( cacheDir: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: cacheDir, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCacheDir", methodSig: "(Ljava/lang/String;)V", methodCache: &ProjectsBinding_ListenerForward.setCacheDir_MethodID_9, args: &__args, locals: &__locals )
    }

    open func setCacheDir( _ _cacheDir: String? ) {
        setCacheDir( cacheDir: _cacheDir )
    }

    /// public abstract void com.lumyk.swiftbindings.ProjectsBinding$Listener.setupAccessToken(java.lang.String)

    private static var setupAccessToken_MethodID_10: jmethodID?

    open func setupAccessToken( accessToken: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: accessToken, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setupAccessToken", methodSig: "(Ljava/lang/String;)V", methodCache: &ProjectsBinding_ListenerForward.setupAccessToken_MethodID_10, args: &__args, locals: &__locals )
    }

    open func setupAccessToken( _ _accessToken: String? ) {
        setupAccessToken( accessToken: _accessToken )
    }

}

private typealias ProjectsBinding_Listener_createOauthURL_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong ) -> ()

private func ProjectsBinding_Listener_createOauthURL_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong ) -> () {
    ProjectsBinding_ListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).createOauthURL( )
}

private typealias ProjectsBinding_Listener_getUser_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong ) -> ()

private func ProjectsBinding_Listener_getUser_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong ) -> () {
    ProjectsBinding_ListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).getUser( )
}

private typealias ProjectsBinding_Listener_handleAccessTokenURL_2_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func ProjectsBinding_Listener_handleAccessTokenURL_2( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ url: jobject? ) -> () {
    ProjectsBinding_ListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).handleAccessTokenURL( url: url != nil ? String( javaObject: url ) : nil )
}

private typealias ProjectsBinding_Listener_setCacheDir_3_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func ProjectsBinding_Listener_setCacheDir_3( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ cacheDir: jobject? ) -> () {
    ProjectsBinding_ListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).setCacheDir( cacheDir: cacheDir != nil ? String( javaObject: cacheDir ) : nil )
}

private typealias ProjectsBinding_Listener_setupAccessToken_4_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func ProjectsBinding_Listener_setupAccessToken_4( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ accessToken: jobject? ) -> () {
    ProjectsBinding_ListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).setupAccessToken( accessToken: accessToken != nil ? String( javaObject: accessToken ) : nil )
}

fileprivate class ProjectsBinding_ListenerLocal_: JNILocalProxy<ProjectsBinding_Listener, Any> {

    fileprivate static let _proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        let ProjectsBinding_Listener_createOauthURL_0_thunk: ProjectsBinding_Listener_createOauthURL_0_type = ProjectsBinding_Listener_createOauthURL_0
        natives.append( JNINativeMethod( name: strdup("__createOauthURL"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( ProjectsBinding_Listener_createOauthURL_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let ProjectsBinding_Listener_getUser_1_thunk: ProjectsBinding_Listener_getUser_1_type = ProjectsBinding_Listener_getUser_1
        natives.append( JNINativeMethod( name: strdup("__getUser"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( ProjectsBinding_Listener_getUser_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let ProjectsBinding_Listener_handleAccessTokenURL_2_thunk: ProjectsBinding_Listener_handleAccessTokenURL_2_type = ProjectsBinding_Listener_handleAccessTokenURL_2
        natives.append( JNINativeMethod( name: strdup("__handleAccessTokenURL"), signature: strdup("(JLjava/lang/String;)V"), fnPtr: unsafeBitCast( ProjectsBinding_Listener_handleAccessTokenURL_2_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let ProjectsBinding_Listener_setCacheDir_3_thunk: ProjectsBinding_Listener_setCacheDir_3_type = ProjectsBinding_Listener_setCacheDir_3
        natives.append( JNINativeMethod( name: strdup("__setCacheDir"), signature: strdup("(JLjava/lang/String;)V"), fnPtr: unsafeBitCast( ProjectsBinding_Listener_setCacheDir_3_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let ProjectsBinding_Listener_setupAccessToken_4_thunk: ProjectsBinding_Listener_setupAccessToken_4_type = ProjectsBinding_Listener_setupAccessToken_4
        natives.append( JNINativeMethod( name: strdup("__setupAccessToken"), signature: strdup("(JLjava/lang/String;)V"), fnPtr: unsafeBitCast( ProjectsBinding_Listener_setupAccessToken_4_thunk, to: UnsafeMutableRawPointer.self ) ) )

        natives.append( JNINativeMethod( name: strdup("__finalize"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( JNIReleasableProxy__finalize_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( proxyClassName() )
        withUnsafePointer(to: &natives[0]) {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        defer { JNI.DeleteLocalRef( clazz ) }
        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    override open class func proxyClassName() -> String { return "org/swiftjava/com_lumyk/ProjectsBinding_ListenerProxy" }
    override open class func proxyClass() -> jclass? { return _proxyClass }

}

extension ProjectsBinding_Listener {

    public func localJavaObject( _ locals: UnsafeMutablePointer<[jobject]> ) -> jobject? {
        return ProjectsBinding_ListenerLocal_( owned: self, proto: self ).localJavaObject( locals )
    }

}

open class ProjectsBinding_ListenerBase: ProjectsBinding_Listener {

    public init() {}

    /// public abstract void com.lumyk.swiftbindings.ProjectsBinding$Listener.createOauthURL()

    open func createOauthURL() /**/ {
    }


    /// public abstract void com.lumyk.swiftbindings.ProjectsBinding$Listener.getUser()

    open func getUser() /**/ {
    }


    /// public abstract void com.lumyk.swiftbindings.ProjectsBinding$Listener.handleAccessTokenURL(java.lang.String)

    open func handleAccessTokenURL( url: String? ) /**/ {
    }


    /// public abstract void com.lumyk.swiftbindings.ProjectsBinding$Listener.setCacheDir(java.lang.String)

    open func setCacheDir( cacheDir: String? ) /**/ {
    }


    /// public abstract void com.lumyk.swiftbindings.ProjectsBinding$Listener.setupAccessToken(java.lang.String)

    open func setupAccessToken( accessToken: String? ) /**/ {
    }


}
